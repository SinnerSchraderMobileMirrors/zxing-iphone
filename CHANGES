0.1 (09 Nov 2007)
- Initial release

0.1.1 (11 Nov 2007)
- Fixed bug decoding version 0 QR Codes
- Now default zoom is 2.5x in Java ME client

0.1.2 (28 Nov 2007)
- Issue 11 fixed: Build problems on Windows
- Can now build "ZXingReaderBasic" which does not require JSR-234
- Issue 14 fixed: release .zip builds into one directory

0.1.3 (7 Dec 2007)
- Unit test for QR Code decoding
- Added EAN-13 support
- Now builds with class file format version 1.2 -- may solve some compatibility issues?
- Fixed obfuscation step bug causing NoClassDefFoundError

0.1.4 (13 Dec 2007)
- Added Blackberry client build script -- does not yet work
- Big change to handling of content of barcodes:
  - com.google.zxing.client.result moved from core-ext to core
  - Rewritten for J2ME
  - core-ext removed
  - J2ME client now uses this code for better parsing/handling of results

0.2 (07 Jan 2008)
  - Few small bug fixes in AlignmentPatternFinder, MultiFormatReader
    (thank K. Kakima, Andreas)
  - LCDUIImageMonochromeBitmapSource now public
  - Notably improved decoding for Basic version -- Regular version still
    your best bet if you can run it though

0.2.1 (16 Jan 2008)
  - Slight tweaks and enhancements to decode and runtime performance of UPCDecoder
  - Added black-box test suites against a known set of images
    (Thanks to Enrique G. S. for additional images)

0.2.2 (22 Jan 2008)
  - Now includes junit locally to build tests
  - Fixed "MIDlet" name in MANIFEST.MF, which may solve some problems
  - Friendlier error message when barcode can't be found

0.3 (04 Feb 2008)
  - Major refactoring of 1D barcode decoding
  - Added support for UPC-E, EAN-8
  - Also added Code 39, Code 128 support -- may need refinement
  - Now any "game" key triggers photo capture
  - Workaround implemented for Nokias that use "capture://image" in MMAPI
  - UPC codes now trigger lookup to upcdatabase.com

0.4 (15 Feb 2008)
  - First release of Android client -- only guaranteed to work with "M3"
    builds so far.
  - Major reorganization of current test cases and data
  - Worked around ProGuard issue with paths with spaces on Windows
  - Phones that don't like FocusControl.AUTO_LOCK won't cause an error now
  - Fixed ArrayIndexOutOfBoundsException in 1D barcode decoders
  - Worked around "java.lang.Error 136" from Nokia N70 (?)
  - Fixed bug in Shift_JIS detection and implemented basic UTF-8 detection
    for nonstandard QR Codes that don't use ISO-8859-1

0.4.5 (22 Feb 2008)
  - Checked in first minimal working Blackberry client. Still quite crude.
  - Fixed UTF-8 detection again
  - Refactored Reed-Solomon to allow different GF(256) primitive polynomials,
    in preparation for Data Matrix
  - Slight improvement to 1D decoding accuracy, most noticeable in
    improvements to Code 128 decoding
  - Bug fix in Code39Reader -- typo in encoding of letter "I" and "0"
  - Bug fix in 1D readers -- error in counting black/white pixel counts
    in certain situations
  - Now supports Extended Code 39
  - Tiny bug fix to QRCodeReader for images that extend all the way
    to top or left
  - Android client now builds with ProGuard optimization

0.5 (05 Mar 2008)
  - Improvement in QR Code decoding accuracy on non-JSR-234 phones
  - Supports "URLTO" data in barcodes.
  - Restructured ParsedReaderResult parsing code to not use so many
    exceptions, for more efficiency.
  - "TRY_HARDER" decoding hint now supported. Will do more work in some cases
    to find an image, such as scan for 1D barcodes at a right angle and
    backwards. Only recommended for non-mobile applications.
  - Result now indicates the format of the decoded barcode with a
    BarcodeFormat instance
  - More intelligent handling of POSSIBLE_FORMATS decoding hint
  - Fixed sub-optimal handling of EAN-13 barcodes which encode a string
    starting with "0". These are now returned as a full 13-digit string
    from EAN13Reader, but will continue to be construed as 12-digit UPC-A
    codes from the MultiFormatReader.
  - A host of small bug fixes, including bug in Version 25 QR Code support
  - A round of code cleanup and refactoring from IntelliJ inspections